# backend/schemas.py

from pydantic import BaseModel
from datetime import datetime
from typing import List, Optional
# FIX: Changed the relative import '.models' to an absolute import 'models'
from models import TransactionType 

# --- BASE SCHEMAS ---
# These define the core data structures and will be extended

class HoldingBase(BaseModel):
    stock_ticker: str
    quantity: int
    average_purchase_price: float

class TransactionBase(BaseModel):
    stock_ticker: str
    transaction_type: TransactionType
    quantity: int
    price_per_share: float
    timestamp: datetime
    # Add the new field, making it optional
    profit_or_loss: Optional[float] = None

class UserBase(BaseModel):
    email: str
    username: str

# --- "CREATE" SCHEMAS ---
# These are used when creating new data (e.g., from a POST request)

class UserCreate(UserBase):
    password: str

# --- "READ" SCHEMAS ---
# These are used when returning data from the API.
# They include fields that are generated by the database (like 'id').
# 'from_attributes = True' tells Pydantic to read data from ORM models.

class Holding(HoldingBase):
    id: int

    class Config:
        from_attributes = True

class Transaction(TransactionBase):
    id: int

    class Config:
        from_attributes = True

class User(UserBase):
    id: int
    budget: float
    transactions: List[Transaction] = []
    holdings: List[Holding] = []

    class Config:
        from_attributes = True

# --- TOKEN & TRADE SCHEMAS ---

class Token(BaseModel):
    access_token: str
    token_type: str

class TokenData(BaseModel):
    username: Optional[str] = None

class TradeRequest(BaseModel):
    ticker: str
    quantity: int
    price: float

# --- NEW RESPONSE SCHEMA FOR SELL TRANSACTIONS ---
# This is the schema that was missing, causing the error.
# It defines the structure of the response when a user sells a stock.

class SellTransactionResponse(BaseModel):
    user: User
    profit_or_loss: float

    class Config:
        from_attributes = True
        
# --- NEW SCHEMA FOR BUDGET UPDATE ---
class BudgetUpdate(BaseModel):
    new_budget: float